import logging
import requests
import json
import os
import random
import re
import hashlib
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
JOKES_FILE = 'jokes.json'
USER_DATA_FILE = 'user_data.json'

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏
class JokeManager:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.jokes = self.load_data(JOKES_FILE)
        self.user_data = self.load_data(USER_DATA_FILE)
        self.sources = [
            'https://www.anekdot.ru/last/anekdot/',
            'https://www.anekdot.ru/random/anekdot/',
            'https://www.anekdot.ru/last/top25/',
            'https://www.anekdot.ru/today/anekdot/',
            'https://www.ba-bamail.com/jokes/search.aspx?search=&categoryId=0',  # –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–¥–µ—Å—å
        ]

    def load_data(self, filename):
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    return {}
        else:
            return {}

    def save_data(self, data, filename):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    def fetch_new_jokes(self):
        new_jokes = []
        for url in self.sources:
            for page in range(1, 6):  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                full_url = f"{url}?page={page}"
                try:
                    response = requests.get(full_url)
                    if response.status_code == 200:
                        content = response.text
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
                        jokes = self.extract_jokes(content)
                        # –û—á–∏—â–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –æ—Ç HTML-—Ç–µ–≥–æ–≤
                        jokes = [re.sub('<.*?>', '', joke).strip() for joke in jokes]
                        for joke in jokes:
                            joke_id = self.generate_joke_id(joke)
                            if joke_id not in self.jokes:
                                self.jokes[joke_id] = {'text': joke, 'rating': 0}
                                new_jokes.append(joke)
                    else:
                        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {full_url}: {response.status_code}')
                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {e}')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã
        self.save_data(self.jokes, JOKES_FILE)
        return new_jokes

    def extract_jokes(self, content):
        # –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏–∑ HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        jokes = re.findall(r'<div class="text">(.*?)</div>', content, re.DOTALL)
        return jokes

    def generate_joke_id(self, joke_text):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞
        return hashlib.md5(joke_text.encode('utf-8')).hexdigest()

    def get_new_joke_for_user(self, user_id):
        user_id_str = str(user_id)
        user_seen_jokes = self.user_data.get(user_id_str, {}).get('jokes_seen', [])
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª
        unseen_jokes = [(joke_id, joke) for joke_id, joke in self.jokes.items()
                        if joke_id not in user_seen_jokes]
        if unseen_jokes:
            joke_id, joke = random.choice(unseen_jokes)
            return joke_id, joke
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.fetch_new_jokes()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            unseen_jokes = [(joke_id, joke) for joke_id, joke in self.jokes.items()
                            if joke_id not in user_seen_jokes]
            if unseen_jokes:
                joke_id, joke = random.choice(unseen_jokes)
                return joke_id, joke
            else:
                return None, None  # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤

    def get_best_joke_for_user(self, user_id):
        user_id_str = str(user_id)
        user_seen_jokes = self.user_data.get(user_id_str, {}).get('jokes_seen', [])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        sorted_jokes = sorted(self.jokes.items(), key=lambda x: x[1]['rating'], reverse=True)
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª
        unseen_jokes = [(joke_id, joke) for joke_id, joke in sorted_jokes
                        if joke_id not in user_seen_jokes]
        if unseen_jokes:
            joke_id, joke = unseen_jokes[0]
            return joke_id, joke
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.fetch_new_jokes()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            unseen_jokes = [(joke_id, joke) for joke_id, joke in self.jokes.items()
                            if joke_id not in user_seen_jokes]
            if unseen_jokes:
                joke_id, joke = unseen_jokes[0]
                return joke_id, joke
            else:
                return None, None  # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤

    def record_joke_sent(self, user_id, joke_id):
        user_id_str = str(user_id)
        if user_id_str not in self.user_data:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_data[user_id_str] = {
                'jokes_seen': [],
                'ad_offset': random.randint(0, 4),
                'last_interaction': datetime.now().isoformat()
            }
        if joke_id not in self.user_data[user_id_str]['jokes_seen']:
            self.user_data[user_id_str]['jokes_seen'].append(joke_id)
            self.save_data(self.user_data, USER_DATA_FILE)

    def update_joke_rating(self, joke_id, increment):
        if joke_id in self.jokes:
            self.jokes[joke_id]['rating'] += increment
            self.save_data(self.jokes, JOKES_FILE)

    def record_user_interaction(self, user_id):
        user_id_str = str(user_id)
        if user_id_str not in self.user_data:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_data[user_id_str] = {
                'jokes_seen': [],
                'ad_offset': random.randint(0, 4),
                'last_interaction': datetime.now().isoformat()
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            self.user_data[user_id_str]['last_interaction'] = datetime.now().isoformat()
        self.save_data(self.user_data, USER_DATA_FILE)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
joke_manager = JokeManager()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
async def daily_jokes_update(context: ContextTypes.DEFAULT_TYPE):
    joke_manager.fetch_new_jokes()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_first_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.chat_id
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="–≠–π, —á–µ–≥–æ —Å–∫—É—á–∞–µ—à—å?"
        )
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 49.5 —á–∞—Å–æ–≤
        context.job_queue.run_once(
            send_second_reminder,
            when=timedelta(hours=49.5),
            chat_id=user_id,
            name=str(user_id) + '_second_reminder'
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_second_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.chat_id
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="–Ø —Å–æ—Å–∫—É—á–∏–ª—Å—è ü•∫"
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def schedule_reminder(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    current_jobs = context.job_queue.get_jobs_by_name(str(user_id) + '_first_reminder')
    for job in current_jobs:
        job.schedule_removal()
    current_jobs = context.job_queue.get_jobs_by_name(str(user_id) + '_second_reminder')
    for job in current_jobs:
        job.schedule_removal()
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 47 —á–∞—Å–æ–≤
    context.job_queue.run_once(
        send_first_reminder,
        when=timedelta(hours=47),
        chat_id=user_id,
        name=str(user_id) + '_first_reminder'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    joke_manager.record_user_interaction(user.id)
    schedule_reminder(context, user.id)
    keyboard = [
        [KeyboardButton('–ù–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç'), KeyboardButton('–õ—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç')]
    ]
    greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üòä\n\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã. –•–æ—á–µ—à—å –ø–æ—Å–º–µ—è—Ç—å—Å—è –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:"
    await update.message.reply_text(
        greeting,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newjoke
async def new_joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    joke_manager.record_user_interaction(user_id)
    schedule_reminder(context, user_id)
    joke_id, joke = joke_manager.get_new_joke_for_user(user_id)
    if joke:
        joke_text = joke['text']
        joke_manager.record_joke_sent(user_id, joke_id)
        await send_joke(update, joke_text, joke_id)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–µ–∫–¥–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bestjoke
async def best_joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    joke_manager.record_user_interaction(user_id)
    schedule_reminder(context, user_id)
    joke_id, joke = joke_manager.get_best_joke_for_user(user_id)
    if joke:
        joke_text = joke['text']
        joke_manager.record_joke_sent(user_id, joke_id)
        await send_joke(update, joke_text, joke_id)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–µ–∫–¥–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞
async def send_joke(update: Update, joke_text: str, joke_id: str):
    user_id = update.effective_user.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = joke_manager.user_data.get(str(user_id), {})
    jokes_sent = len(user_data.get('jokes_seen', []))
    ad_offset = user_data.get('ad_offset', 0)
    if (jokes_sent + ad_offset) % 5 == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –≤ –∫–∞–∂–¥—ã–π –ø—è—Ç—ã–π –∞–Ω–µ–∫–¥–æ—Ç
        joke_text_with_ad = f"{joke_text}\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @your_channel"
    else:
        joke_text_with_ad = joke_text
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("üòÇ", callback_data=f'like_{joke_id}'),
            InlineKeyboardButton("üòí", callback_data=f'dislike_{joke_id}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(joke_text_with_ad, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    joke_manager.record_user_interaction(user_id)
    schedule_reminder(context, user_id)
    text = update.message.text.strip()
    if text == '–ù–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç':
        joke_id, joke = joke_manager.get_new_joke_for_user(user_id)
    elif text == '–õ—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç':
        joke_id, joke = joke_manager.get_best_joke_for_user(user_id)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    if joke:
        joke_text = joke['text']
        joke_manager.record_joke_sent(user_id, joke_id)
        await send_joke(update, joke_text, joke_id)
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–µ–∫–¥–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async def vote_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    joke_manager.record_user_interaction(user_id)
    schedule_reminder(context, user_id)
    if data.startswith('like_'):
        joke_id = data.split('_')[1]
        joke_manager.update_joke_rating(joke_id, 1)
        await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ª–∞–π–∫! üëç")
    elif data.startswith('dislike_'):
        joke_id = data.split('_')[1]
        joke_manager.update_joke_rating(joke_id, -1)
        await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ü§î")
    else:
        await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /newjoke –∏ /bestjoke.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    TOKEN = '7676676474:AAHXb74U1IIkOZYskLJkNAYn-StIo1H_u7M'  # –ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–û–ö–ï–ù' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    if not TOKEN:
        print("Error: BOT_TOKEN environment variable not set.")
        return
    application = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', start))  # –ö–æ–º–∞–Ω–¥–∞ /help –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç
    application.add_handler(CommandHandler('newjoke', new_joke_command))
    application.add_handler(CommandHandler('bestjoke', best_joke_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    choice_filter = filters.Regex('^(–ù–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç|–õ—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç)$')
    application.add_handler(MessageHandler(choice_filter, handle_choice))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(vote_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_command))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand('start', '–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º'),
        BotCommand('help', '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å'),
        BotCommand('newjoke', '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç'),
        BotCommand('bestjoke', '–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç'),
    ]
    application.bot.set_my_commands(commands)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
    application.job_queue.run_repeating(
        daily_jokes_update,
        interval=timedelta(hours=24),
        first=timedelta(seconds=0)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
